-- profiles
create table public.profiles (
  id uuid not null,
  full_name text null,
  avatar_url text null,
  role text not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint profiles_pkey primary key (id),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;


-- Storage Bucket models
-- Création du bucket storage pour les images des modèles
INSERT INTO storage.buckets (id, name, public)
VALUES ('models', 'models', true); -- 'public' est défini sur true pour permettre l'accès public aux images

-- Créer une politique pour permettre l'insertion dans le bucket models
CREATE POLICY "Tous les utilisateurs peuvent uploader des images" 
  ON storage.objects 
  FOR INSERT 
  TO authenticated
  WITH CHECK (bucket_id = 'models');

-- Créer une politique pour permettre de voir les images du bucket models
CREATE POLICY "Tous les utilisateurs peuvent voir les images" 
  ON storage.objects 
  FOR SELECT 
  TO public
  USING (bucket_id = 'models');

-- Créer une politique pour permettre la mise à jour des images
CREATE POLICY "Les utilisateurs authentifiés peuvent mettre à jour leurs images" 
  ON storage.objects 
  FOR UPDATE 
  TO authenticated
  USING (bucket_id = 'models' AND owner = auth.uid());

-- Créer une politique pour permettre la suppression des images
CREATE POLICY "Les utilisateurs authentifiés peuvent supprimer leurs images" 
  ON storage.objects 
  FOR DELETE 
  TO authenticated
  USING (bucket_id = 'models' AND owner = auth.uid());

  -- models
  create table public.models (
  id uuid not null default extensions.uuid_generate_v4 (),
  first_name text not null,
  last_name text not null,
  gender text not null,
  height integer not null,
  bust integer not null,
  waist integer not null,
  hips integer not null,
  shoe_size numeric(4, 1) not null,
  eye_color text not null,
  hair_color text not null,
  instagram text null,
  models_com_link text null,
  main_image text not null,
  additional_images text[] null,
  agent_id uuid not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  age numeric null,
  description text null,
  constraint models_pkey primary key (id),
  constraint models_agent_id_fkey foreign KEY (agent_id) references auth.users (id),
  constraint models_gender_check check (
    (
      gender = any (array['male'::text, 'female'::text])
    )
  )
) TABLESPACE pg_default;

create trigger update_models_timestamp BEFORE
update on models for EACH row
execute FUNCTION update_modified_column ();

-- clients
create table public.clients (
  id uuid not null default extensions.uuid_generate_v4 (),
  name text not null,
  contact_name text null,
  email text null,
  phone text null,
  address text null,
  city text null,
  country text null,
  notes text null,
  agent_id uuid not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint clients_pkey primary key (id),
  constraint clients_agent_id_fkey foreign KEY (agent_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create trigger update_clients_timestamp BEFORE
update on clients for EACH row
execute FUNCTION update_modified_column ();

-- package-models
create table public.package_models (
  id uuid not null default extensions.uuid_generate_v4 (),
  package_id uuid not null,
  model_id uuid not null,
  created_at timestamp with time zone null default now(),
  constraint package_models_pkey primary key (id),
  constraint package_models_unique unique (package_id, model_id),
  constraint package_models_model_id_fkey foreign KEY (model_id) references models (id) on delete CASCADE,
  constraint package_models_package_id_fkey foreign KEY (package_id) references packages (id) on delete CASCADE
) TABLESPACE pg_default;

-- packages
create table public.packages (
  id uuid not null default extensions.uuid_generate_v4 (),
  name text not null,
  description text null,
  status text not null,
  price numeric(10, 2) null,
  deadline date null,
  project_id uuid not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint packages_pkey primary key (id),
  constraint packages_project_id_fkey foreign KEY (project_id) references projects (id) on delete CASCADE,
  constraint packages_status_check check (
    (
      status = any (
        array[
          'pending'::text,
          'planned'::text,
          'in_progress'::text,
          'completed'::text,
          'cancelled'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create trigger update_packages_timestamp BEFORE
update on packages for EACH row
execute FUNCTION update_modified_column ();

-- projects
create table public.projects (
  id uuid not null default extensions.uuid_generate_v4 (),
  name text not null,
  description text null,
  status text not null,
  start_date date null,
  end_date date null,
  client_id uuid not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint projects_pkey primary key (id),
  constraint projects_client_id_fkey foreign KEY (client_id) references clients (id) on delete CASCADE,
  constraint projects_status_check check (
    (
      status = any (
        array[
          'draft'::text,
          'planned'::text,
          'in_progress'::text,
          'completed'::text,
          'cancelled'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create trigger update_projects_timestamp BEFORE
update on projects for EACH row
execute FUNCTION update_modified_column ();